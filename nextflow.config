profiles {
    standard {
        docker.enabled=true
        process {
            withLabel:dorado {
                cpus=6
                containerOptions = "--gpus all"
            }
            withLabel:pod5 {
                cpus=17
            }
            withLabel:minimap {
                cpus=42
            }
            withName:nanoplot {
                cpus=10
            }
            withLabel:sam_big {
                cpus=20
            }
            withLabel:'sam_sm|sam_long' {
                cpus=4
            }
            withName:mosdepth {
                cpus=2
            }
        }
        params {
            adaptive=false
            sample_sheet=null
            out_dir = "${projectDir}/output"
            skip_basecall=false
            skip_mapping=false
            duplex=false
            no_mod=false
            ubam=null
            bed="${projectDir}/assets/NO_BED"
            demux=null
            demux_sheet=null
            sample_id="reads"
            ref="${projectDir}/assets/NO_REF"
            minqs=10
            model="sup"
            m_bases="5mC_5hmC"
            model_path=null
            m_bases_path=null
            help = false
            device=null
            batch=null
            threads = 40
            publish=true
        }
    }

    test {
        workDir="./results/work"
        docker.enabled=true
        process {
            withLabel:dorado {
                cpus=4
            }
            withName:nanoplot {
                cpus=2
            }
            withLabel:minimap {
                cpus=2
            }
            withLabel:'sam_big|sam_sm|sam_long' {
                cpus=2
            }
            withName:mosdepth {
                cpus=2
            }
        }
        params {
            adaptive=false
            sample_sheet=null
            out_dir="./results"
            git=true
            skip_basecall=false
            skip_mapping=false
            dorado_cpu=true
            duplex=false
            no_mod=true
            ubam=null
            bed="${projectDir}/assets/NO_BED"
            demux=null
            demux_sheet=null
            ref="${projectDir}/assets/NO_REF"
            minqs=10
            model=null
            m_bases=null
            model_path="${projectDir}/test/dna_r10.4.1_e8.2_400bps_hac@v4.1.0"
            m_bases_path=null
            help=false
            device=null
            batch=10
            threads = 3
            publish=false
        }
    }
    drac {
        process {
            withLabel:dorado {
                array = 10
                executor = 'slurm'
                containerOptions = "--nv" 
                clusterOptions = "--gpus-per-node=4"
                time = { check_max( 24.h * task.attempt, 'time' ) }
                memory = { check_max( 60.GB * task.attempt, 'memory' ) }
                cpus = { check_max( 8 * task.attempt, 'cpus' ) }
                errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
            }
            withName:demultiplex {
                array = 96
                executor = 'slurm'
                time = { check_max( 4.h * task.attempt, 'time' ) }
                memory = { check_max( 4.GB * task.attempt, 'memory' ) }
                cpus = { check_max( 5 * task.attempt, 'cpus' ) }
                errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
            }
            withName:pod5_channel {
                array = 10
                executor = 'slurm'
                time = { check_max( 2.h * task.attempt, 'time' ) }
                memory = { check_max( 4.GB * task.attempt, 'memory' ) }
                cpus = { check_max( 4 * task.attempt, 'cpus' ) }
                errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
            }
            withName:subset {
                array = 10
                executor = 'slurm'
                time = { check_max( 12.h * task.attempt, 'time' ) }
                memory = { check_max( 30.GB * task.attempt, 'memory' ) }
                cpus = { check_max( 40 * task.attempt, 'cpus' ) }
                errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
            }
            withName:nanoplot {
                array = 96
                executor = 'slurm'
                time = { check_max( 4.h * task.attempt, 'time' ) }
                memory = { check_max( 30.GB * task.attempt, 'memory' ) }
                cpus = { check_max( 10 * task.attempt, 'cpus' ) }
                errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
            }
            withLabel:minimap {
                array = 96
                executor = 'slurm'
                time = { check_max( 12.h * task.attempt, 'time' ) }
                memory = { check_max( 30.GB * task.attempt, 'memory' ) }
                cpus = { check_max( 40 * task.attempt, 'cpus' ) }
                errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
            }
            withLabel:sam_big {
                array = 96
                executor = 'slurm'
                time = { check_max( 2.h * task.attempt, 'time' ) }
                memory = { check_max( 40.GB * task.attempt, 'memory' ) }
                cpus = { check_max( 30 * task.attempt, 'cpus' ) }
                errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
            }
            withLabel:sam_long {
                array = 96
                executor = 'slurm'
                time = { check_max( 18.h * task.attempt, 'time' ) }
                memory = { check_max( 3.GB * task.attempt, 'memory' ) }
                cpus = { check_max( 5 * task.attempt, 'cpus' ) }
                errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
            }
            withLabel:sam_sm {
                array = 96
                executor = 'slurm'
                time = { check_max( 3.h * task.attempt, 'time' ) }
                memory = { check_max( 7.GB * task.attempt, 'memory' ) }
                cpus = { check_max( 10 * task.attempt, 'cpus' ) }
                errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
            }
            withName:mosdepth {
                array = 96
                executor = 'slurm'
                clusterOptions = "--cpus-per-task=10 --mem 20G --time=3:00:00"
                time = { check_max( 3.h * task.attempt, 'time' ) }
                memory = { check_max( 15.GB * task.attempt, 'memory' ) }
                cpus = { check_max( 10 * task.attempt, 'cpus' ) }
                errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
            }
            withName:multiqc {
                executor = 'slurm'
                clusterOptions = "--cpus-per-task=1 --mem 1G --time=1:00:00"
                time = { check_max( 30.m * task.attempt, 'time' ) }
                memory = { check_max( 500.MB * task.attempt, 'memory' ) }
                cpus = { check_max( 1 * task.attempt, 'cpus' ) }
                errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
            }
        }
        params {
            adaptive=false
            sample_sheet=null
            out_dir="${projectDir}/output"
            skip_basecall=false
            skip_mapping=false
            duplex=false
            no_mod=false
            ubam=null
            bed="${projectDir}/assets/NO_BED"
            demux=null
            demux_sheet=null
            ref="${projectDir}/assets/NO_REF"
            minqs=10
            model_path="/project/ctb-noncodo/Platform/references/dorado_models/dna_r10.4.1_e8.2_400bps_sup@v5.0.0"
            m_bases_path="/project/ctb-noncodo/Platform/references/dorado_models/dna_r10.4.1_e8.2_400bps_sup@v5.0.0_5mC_5hmC@v1"
            model=null
            m_bases=null
            help=false
            device=null
            batch=null
            threads = 40
            publish=true
            max_memory='249G'
            max_cpus=64
            max_time='168h'
        }
        apptainer {
            enabled=true
            autoMounts=true
            runOptions = "-B /project/ctb-noncodo/Platform/references"
            libraryDir = "/project/ctb-noncodo/Platform/references/apptainer/images"
            cacheDir = "/project/ctb-noncodo/Platform/references/apptainer/cache"
        }
    }
    test_drac {
        process {
            withName:basecall {
                array = 2
                executor = 'slurm'
                containerOptions = "--nv"
                clusterOptions = "--gpus-per-node=1"
                time = { check_max( 1.m * task.attempt, 'time' ) }
                memory = { check_max( 10.GB * task.attempt, 'memory' ) }
                cpus = { check_max( 6 * task.attempt, 'cpus' ) }
                errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
            }
            withName:demultiplex {
                array = 2
                executor = 'slurm'
                time = { check_max( 2.h * task.attempt, 'time' ) }
                memory = { check_max( 3.GB * task.attempt, 'memory' ) }
                cpus = { check_max( 5 * task.attempt, 'cpus' ) }
                errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
            }
            withLabel:pod5 {
                array = 2
                executor = 'slurm'
                time = { check_max( 2.h * task.attempt, 'time' ) }
                memory = { check_max( 3.GB * task.attempt, 'memory' ) }
                cpus = { check_max( 4 * task.attempt, 'cpus' ) }
                errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
            }
            withName:nanoplot {
                array = 2
                executor = 'slurm'
                time = { check_max( 1.h * task.attempt, 'time' ) }
                memory = { check_max( 2.GB * task.attempt, 'memory' ) }
                cpus = { check_max( 3 * task.attempt, 'cpus' ) }
                errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
            }
            withLabel:minimap {
                array = 2
                executor = 'slurm'
                time = { check_max( 3.h * task.attempt, 'time' ) }
                memory = { check_max( 10.GB * task.attempt, 'memory' ) }
                cpus = { check_max( 10 * task.attempt, 'cpus' ) }
                errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
            }
            withLabel:'sam_big|sam_sm|sam_long' {
                array = 2
                executor = 'slurm'
                time = { check_max( 3.h * task.attempt, 'time' ) }
                memory = { check_max( 10.GB * task.attempt, 'memory' ) }
                cpus = { check_max( 10 * task.attempt, 'cpus' ) }
                errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
            }
            withName:multiqc {
                array = 2
                executor = 'slurm'
                time = { check_max( 30.m * task.attempt, 'time' ) }
                memory = { check_max( 200.MB * task.attempt, 'memory' ) }
                cpus = { check_max( 1 * task.attempt, 'cpus' ) }
                errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
            }
            withName:mosdepth {
                array = 2
                executor = 'slurm'
                time = { check_max( 1.h * task.attempt, 'time' ) }
                memory = { check_max( 1.GB * task.attempt, 'memory' ) }
                cpus = { check_max( 2 * task.attempt, 'cpus' ) }
                errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
            }
        }
        params {
            adaptive=false
            out_dir="${projectDir}/output"
            skip_basecall=false
            skip_mapping=false
            duplex=false
            no_mod=true
            ubam=null
            demux=null
            demux_sheet=null
            bed="${projectDir}/assets/NO_BED"
            ref="${projectDir}/test/ref.fasta"
            sample_sheet="${projectDir}/test/samplesheet.csv"
            minqs=9
            model_path="/project/ctb-noncodo/Platform/references/dorado_models/dna_r10.4.1_e8.2_400bps_hac@v4.1.0"
            m_bases_path="/project/ctb-noncodo/Platform/references/dorado_models/dna_r10.4.1_e8.2_400bps_hac@v4.1.0_5mCG_5hmCG@v2"
            model=null
            m_bases=null
            help=false
            device=null
            batch=null
            threads=12
            publish=true
            max_memory='249G'
            max_cpus=64
            max_time='168h'
        }
        apptainer {
            enabled=true
            autoMounts=true
            runOptions = "-B /project/ctb-noncodo/Platform/references"
            libraryDir = "/project/ctb-noncodo/Platform/references/apptainer/images"
            cacheDir = "/project/ctb-noncodo/Platform/references/apptainer/cache"
        }
    }
}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}